Index: kguitar/CMakeLists.txt
===================================================================
--- kguitar/CMakeLists.txt	(revision 1006)
+++ kguitar/CMakeLists.txt	(working copy)
@@ -72,8 +72,10 @@
 	${KDE4_KDEUI_LIBS}
 	${KDE4_KPARTS_LIBS}
 	${KDE4_KDE3SUPPORT_LIBS}
-	${TSE3_LIBRARIES}
 )
+if(WITH_TSE3)
+	target_link_libraries(kguitarpart ${TSE3_LIBRARIES})
+endif(WITH_TSE3)
 
 install(FILES kguitar_part.desktop DESTINATION ${XDG_APPS_INSTALL_DIR})
 install(FILES kguitar_part.rc DESTINATION ${DATA_INSTALL_DIR}/kguitarpart)
Index: kguitar/optionsmidi.cpp
===================================================================
--- kguitar/optionsmidi.cpp	(revision 1006)
+++ kguitar/optionsmidi.cpp	(working copy)
@@ -28,13 +28,11 @@
 	midiport = new QTableWidget(this);
 //	midiport->setSorting(-1); // no text sorting
 	midiport->setFrameStyle(QFrame::Panel | QFrame::Sunken);
-	midiport->insertColumn(0);
-	midiport->insertColumn(1);
-	midiport->setHorizontalHeaderLabels(QStringList() << QString(i18n("Port")) << QString(i18n("Info")));
+	midiport->setColumnCount(2);
 
 	fillMidiBox();
 
-	QLabel *midiport_l = new QLabel(i18n("MIDI &output port"), midiport);
+	QLabel *midiport_l = new QLabel(i18n("MIDI output port"), midiport);
 
 	QPushButton *midirefresh = new QPushButton(i18n("&Refresh"), this);
 	connect(midirefresh, SIGNAL(clicked()), SLOT(fillMidiBox()));
@@ -60,16 +58,16 @@
 	sch->portNumbers(portNums);
 
 	midiport->clear();
+	midiport->setHorizontalHeaderLabels(QStringList() << QString(i18n("Port")) << QString(i18n("Info")));
+	midiport->setRowCount(portNums.size());
 
-	QTableWidgetItem *lastItem = NULL;
-
 	for (size_t i = 0; i < sch->numPorts(); i++) {
-		lastItem = new QTableWidgetItem(
-			midiport, lastItem, QString::number(portNums[i]),
-			sch->portName(portNums[i])
-		);
+		QTableWidgetItem *port = new QTableWidgetItem(QString::number(portNums[i]));
+		QTableWidgetItem *info = new QTableWidgetItem(sch->portName(portNums[i]));
+		midiport->setItem(i, 0, port);
+		midiport->setItem(i, 1, info);
 		if (Settings::midiPort() == portNums[i])
-			midiport->setCurrentItem(lastItem);
+			midiport->setCurrentItem(port);
 	}
 #endif
 }
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 1006)
+++ CMakeLists.txt	(working copy)
@@ -24,7 +24,7 @@
 find_library(TSE3_LIBRARY NAMES tse3)
 mark_as_advanced(TSE3_LIBRARY)
 
-# handle the QUIETLY and REQUIRED arguments and set TSE3_FOUND to TRUE if 
+# handle the QUIETLY and REQUIRED arguments and set TSE3_FOUND to TRUE if
 # all listed variables are TRUE
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(TSE3 DEFAULT_MSG TSE3_LIBRARY TSE3_INCLUDE_DIR)
@@ -32,19 +32,22 @@
 if(TSE3_FOUND)
 	set(TSE3_LIBRARIES ${TSE3_LIBRARY})
 	set(TSE3_INCLUDE_DIRS ${TSE3_INCLUDE_DIR})
-else(TSE3_FOUND)
-	set(TSE3_LIBRARIES)
-	set(TSE3_INCLUDE_DIRS)
 endif(TSE3_FOUND)
 
 # ======================================================================
 
-set(WITH_TSE3 ${TSE3_FOUND})
+option(WITH_TSE3 "Build KGuitar with TSE3 midi sequencer support" ${TSE3_FOUND})
+if(WITH_TSE3 AND NOT TSE3_FOUND)
+	message(FATAL_ERROR "WITH_TSE3 enabled but not found")
+endif(WITH_TSE3 AND NOT TSE3_FOUND)
+if(WITH_TSE3)
+	# for moc can properly generate playbacktracker.h
+	add_definitions(-DWITH_TSE3=1)
+endif(WITH_TSE3)
 
-# TSE3 requires exceptions enabled
+# TSE3 and other code requires exceptions enabled
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${KDE4_ENABLE_EXCEPTIONS}")
 
-add_subdirectory(doc)
 add_subdirectory(kguitar)
 add_subdirectory(kguitar_shell)
 add_subdirectory(icons)
