--- src/osgPlugins/xine/ReaderWriterXine.cpp	2008-07-14 02:18:00.000000000 +0400
+++ src/osgPlugins/xine/ReaderWriterXine.cpp	2008-10-02 16:37:46.000000000 +0400
@@ -30,8 +30,7 @@
             _visual(0),
             _stream(0),
             _event_queue(0),
-            _ready(false),
-            _volume(-1.0)
+            _ready(false)
         {
             setOrigin(osg::Image::TOP_LEFT);
         }
@@ -41,28 +40,28 @@
             ImageStream(image,copyop) {}
 
         META_Object(osgXine,XineImageStream);
-        
+
         void setVolume(float volume)
         {
-            _volume = osg::minimum(osg::maximum(volume,0.0f),1.0f);
-            if (_stream) 
+            volume = osg::minimum(osg::maximum(volume,0.0f),1.0f);
+            if (_stream)
             {
-                xine_set_param(_stream, XINE_PARAM_AUDIO_VOLUME, static_cast<int>(_volume*100.0f));
-                osg::notify(osg::NOTICE)<<"Setting volume "<<_volume<<std::endl;
+                xine_set_param(_stream, XINE_PARAM_AUDIO_AMP_LEVEL, static_cast<int>(volume*100.0f));
+                osg::notify(osg::NOTICE)<<"Setting volume "<<volume<<std::endl;
             }
         }
-        
+
         float getVolume() const
         {
-            return _volume;
+            return xine_get_param(_stream, XINE_PARAM_AUDIO_AMP_LEVEL) / 100.0;
         }
 
         bool open(xine_t* xine, const std::string& filename)
         {
             if (filename==getFileName()) return true;
-            
+
             _xine = xine;
-        
+
             // create visual
             rgbout_visual_info_t* visual = new rgbout_visual_info_t;
             visual->levels = PXLEVEL_ALL;
@@ -82,38 +81,25 @@
                 osg::notify(osg::NOTICE)<<"XineImageStream::open() : Failed to create video driver"<<std::endl;
                 return false;
             }
-            
 
             // set up stream
             _stream = xine_stream_new(_xine, _ao, _vo);
-            
-            if (_stream)
-            {
-                if (_volume < 0.0)
-                {
-                    _volume = static_cast<float>(xine_get_param(_stream, XINE_PARAM_AUDIO_VOLUME))/100.0f;
-                }
-                else
-                {
-                    setVolume(_volume);
-                }
-            }
 
             _event_queue = xine_event_new_queue(_stream);
             xine_event_create_listener_thread(_event_queue, event_listener, this);
 
             int result = xine_open(_stream, filename.c_str());
-            
+
             if (result==0)
             {
                 osg::notify(osg::INFO)<<"XineImageStream::open() : Could not ready movie file."<<std::endl;
                 close();
                 return false;
             }
-            
-            
+
+
             _ready = false;
-            
+
             int width = xine_get_stream_info(_stream,XINE_STREAM_INFO_VIDEO_WIDTH);
             int height = xine_get_stream_info(_stream,XINE_STREAM_INFO_VIDEO_HEIGHT);
             allocateImage(width,height,1,GL_RGB,GL_UNSIGNED_BYTE,1);
@@ -121,11 +107,22 @@
             osg::notify(osg::INFO)<<"XineImageStream::open() size "<<width<<" "<<height<<std::endl;
 
             // play();
-            
+
             return true;
 
         }
 
+        double getLength() const
+        {
+            if (_stream)
+            {
+                int length;
+                if (xine_get_pos_length (_stream, 0, 0, &length))
+                    return length / 1000;
+            }
+            return 0;
+        }
+
         virtual void play()
         {
             if (_status!=PLAYING && _stream)
@@ -162,15 +159,26 @@
             if (_status==PAUSED || _status==INVALID) return;
 
             _status=PAUSED;
-            
+
             if (_stream)
             {
-                xine_set_param (_stream, XINE_PARAM_SPEED, XINE_SPEED_PAUSE);
+                //xine_set_param (_stream, XINE_PARAM_SPEED, XINE_SPEED_PAUSE);
+				xine_stop(_stream);
             }
         }
 
         virtual void rewind()
         {
+            if( _stream )
+            {
+                xine_play(_stream,0,0);
+                if (_status == INVALID)
+                    xine_stop(_stream);
+                if (_status == PAUSED)
+					xine_stop(_stream);
+                    //xine_set_param (_stream, XINE_PARAM_SPEED, XINE_SPEED_PAUSE);
+            }
+            return;
             if (_status==INVALID) return;
 
             _status=REWINDING;
@@ -186,6 +194,31 @@
             close();
         }
 
+        void setReferenceTime(double time)
+        {
+            if (_stream)
+            {
+                xine_play(_stream, 0, static_cast<int>(time*1000));
+                if (_status == PAUSED)
+					xine_stop(_stream);
+                    //xine_set_param (_stream, XINE_PARAM_SPEED, XINE_SPEED_PAUSE);
+                if (_status == INVALID)
+                    xine_stop(_stream);
+                osg::notify(osg::NOTICE) << "Reference time for xine stream is set to " << time << std::endl;
+            }
+        }
+
+        double getReferenceTime() const
+        {
+            if (_stream)
+            {
+                const double rt = xine_get_current_vpts(_stream) / 90000.0;
+                osg::notify(osg::NOTICE) << "Reference time for xine stream is " << rt << std::endl;
+                return rt;
+            }
+            return 0.0;
+        }
+
         static void my_render_frame(uint32_t width, uint32_t height, void* data, void* userData)
         {
             XineImageStream* imageStream = (XineImageStream*) userData;
@@ -228,11 +261,8 @@
         xine_stream_t*          _stream;
         xine_event_queue_t*     _event_queue;
         bool                    _ready;
-        float                   _volume;
 
     protected:
-
-
         virtual ~XineImageStream()
         {
             osg::notify(osg::INFO)<<"Killing XineImageStream"<<std::endl;
@@ -248,7 +278,7 @@
             if (_stream)
             {
                   osg::notify(osg::INFO)<<"  Closing stream"<<std::endl;
-                
+
                   xine_close(_stream);
 
                   osg::notify(osg::INFO)<<"  Disposing stream"<<std::endl;
@@ -257,9 +287,8 @@
                   _stream = 0;
             }
 
-
-            if (_event_queue)
-            {
+            if (_event_queue){
+                xine_event_dispose_queue(_event_queue);
                 _event_queue = 0;
             }
 
@@ -268,16 +297,16 @@
                osg::notify(osg::INFO)<<"  Closing audio driver"<<std::endl;
 
                 xine_close_audio_driver(_xine, _ao);  
-                
+
                 _ao = 0;
             }
-            
+
             if (_vo)
             {
                osg::notify(osg::INFO)<<"  Closing video driver"<<std::endl;
 
-                xine_close_video_driver(_xine, _vo);  
-                
+               xine_close_video_driver(_xine, _vo);  
+
                 _vo = 0;
             }
 
@@ -297,6 +326,8 @@
                     //rewind();
                     xine_play(xis->_stream, 0, 0);
                 }
+                else
+                    xis->_status = INVALID;
                 break;
             }
         }
@@ -319,7 +350,7 @@
             supportsExtension("mpv","Mpeg movie format");
             supportsExtension("wmv","");
             supportsExtension("xine","Xine plugin Pseduo plugin");
-        
+
             _xine = xine_new();
 
             const char* user_home = xine_get_homedir();
@@ -331,25 +362,25 @@
             }
 
             xine_init(_xine);
-            
+
             register_rgbout_plugin(_xine);
         }
-     
+
         virtual ~ReaderWriterXine()
         {
             osg::notify(osg::INFO)<<"~ReaderWriterXine()"<<std::endl;
-        
+
             if (_xine) xine_exit(_xine);
             _xine = NULL;
         }
-        
+
         virtual const char* className() const { return "Xine ImageStream Reader"; }
 
         virtual ReadResult readImage(const std::string& file, const osgDB::ReaderWriter::Options* options) const
         {
             std::string ext = osgDB::getLowerCaseFileExtension(file);
             if (!acceptsExtension(ext)) return ReadResult::FILE_NOT_HANDLED;
-            
+
             std::string fileName;
             if (ext=="xine")
             {
--- src/osgPlugins/xine/video_out_rgb.c	2007-05-04 23:17:00.000000000 +0400
+++ src/osgPlugins/xine/video_out_rgb.c	2008-10-30 17:46:21.549955680 +0300
@@ -100,6 +100,8 @@
 		: "=&D" (dest)
 		: "r" (size >> 2), "r" (size & 3), "0" (dest)
 		: "eax", "ecx");
+#else
+	memset( dest, 0, size );
 #endif
 }
 
